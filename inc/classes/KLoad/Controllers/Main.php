<?php
/*
 * K-Load v2 (https://demo.maddela.org/k-load/).
 *
 * @link      https://www.maddela.org
 * @link      https://github.com/kanalumaddela/k-load-v2
 *
 * @author    kanalumaddela <git@maddela.org>
 * @copyright Copyright (c) 2018-2021 kanalumaddela
 * @license   MIT
 */

namespace KLoad\Controllers;

use JsonException;
use KLoad\Helpers\Util;
use KLoad\Models\Setting;
use KLoad\Models\User;
use KLoad\View\LoadingView;
use function array_merge;
use function file_exists;
use function KLoad\loadingView;
use const KLoad\ALLOW_THEME_OVERRIDE;
use const KLoad\APP_ROOT;
use const KLoad\ENABLE_REGISTRATION;
use const KLoad\IGNORE_PLAYER_CUSTOMIZATIONS;

class Main extends BaseController
{
    /**
     * @throws JsonException
     */
    public function index()
    {
//        dd(static::getDataHooks());

        $data = $this->buildBaseData();

        $theme = LoadingView::getTheme();

        if (ENABLE_REGISTRATION && !IGNORE_PLAYER_CUSTOMIZATIONS && !empty($data['steamid'])) {
            $player = User::select('name', 'steamid', 'steamid2', 'steamid3', 'admin', 'settings', 'banned', 'registered')->where('steamid', $data['steamid'])->first();

            if ($player) {
                $player = $player->toArray();

                $data['user'] = $player;
                $data['settings'] = array_merge($data['settings'], $player['settings']);
                unset($data['settings']['theme']);

                $theme = $player['settings']['theme'];

//                if (!IGNORE_PLAYER_CUSTOMIZATIONS) {
//                    $theme = $player['settings']['theme'];
//                }
            }
        }

//        if ((ALLOW_THEME_OVERRIDE || IGNORE_PLAYER_CUSTOMIZATIONS) && !empty($_GET['theme'])) {
//            $theme = $_GET['theme'];
//        }

        $theme = 'new';

        LoadingView::setTheme($theme);
        $data['theme']['name'] = $theme;

//        if (count(static::getDataHooks()) > 0) {
//            $data = static::addHookData($data);
//        }

//        dd($data);

        return loadingView(['data' => json_encode($data, JSON_THROW_ON_ERROR)]);
    }

    protected function buildBaseData(): array
    {
        $steamid = $_GET['sid'] ?? $_GET['steamid'] ?? null;
        if ($steamid === '%s') {
            $steamid = null;
        }

        $map = $_GET['map'] ?? $_GET['mapname'] ?? null;
        if ($map === '%m') {
            $map = null;
        }

        $data = [
            'map'            => $map,
            'steamid'        => $steamid,
            'settings'       => Setting::whereIn('name', static::getLoadingScreenSettings())->get()->pluck('value', 'name')->toArray(),
            'forcedGamemode' => $_GET['gamemode'] ?? null,
            'user'           => [],
        ];

        $data['settings']['backgrounds'] = array_merge(['list' => Util::getBackgrounds()], $data['settings']['backgrounds']);
        $data['theme'] = file_exists(APP_ROOT.'/themes/'.LoadingView::getTheme().'/config.php') ? include APP_ROOT.'/themes/'.LoadingView::getTheme().'/config.php' : [];

        return $data;
    }

    protected static function getLoadingScreenSettings(): array
    {
        return [
            'backgrounds',
            'community_name',
            'description',
            'logo',
            'messages',
            'music',
            'rules',
            'staff',
            'youtube',
        ];
    }

    protected static function getDataHooks(): array
    {
        $dir = APP_ROOT.'/plugins/disabled';
        $files = scandir($dir);

        $class_count = 1;

        foreach ($files as $file) {
            if ($file === '.' || $file === '..') {
                continue;
            }

            if (substr($file, -3, 3) === 'php') {
                include_once $dir.'/'.$file;
                $class_count++;
            }
        }

        foreach (array_slice(get_declared_classes(), -$class_count, $class_count) as $class) {
            if ($class === 'KLoad\Hooks\DataHook') {
                continue;
            }

            $instance = new $class();
        }

        return parent::getDataHooks(); // TODO: Change the autogenerated stub
    }
}
