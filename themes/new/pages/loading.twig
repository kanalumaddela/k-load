{% extends '@base/layouts/loading.twig' %}

{% block title %}Theme | K-Load{% endblock %}

{% block body %}
    <style>
        body {
            color: #fff;
        }

        table, th, td {
            border: 1px solid #fff;
        }

        th, td {
            padding: 5px;
        }

        .loading-bar {
            background-color: #fff;
        }

        body > .bg-container {
            pointer-events: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .bg-container {
            z-index: -9999;
            position: relative;
        }

        .bg-item {
            z-index: -9998;
            position: absolute;
            width: 100%;
            height: 100%;
            background-size: cover;
            background-position: center;
            -webkit-transition: opacity .65s ease-out;
            opacity: 0;
        }
    </style>
    <div style="margin: auto;max-width: 80%;">
        <div>
            <h2>GameDetails</h2>
            <table>
                <tbody>
                <tr>
                    <td>server-name</td>
                    <td class="server-name"></td>
                </tr>
                <tr>
                    <td>server-url</td>
                    <td class="server-url"></td>
                </tr>
                <tr>
                    <td>map</td>
                    <td class="map"></td>
                </tr>
                <tr>
                    <td>max-players</td>
                    <td class="max-players"></td>
                </tr>
                <tr>
                    <td>steamid</td>
                    <td class="steamid"></td>
                </tr>
                <tr>
                    <td>gamemode</td>
                    <td class="gamemode"></td>
                </tr>
                <tr>
                    <td>volume</td>
                    <td class="volume"></td>
                </tr>
                <tr>
                    <td>language</td>
                    <td class="language"></td>
                </tr>
                </tbody>
            </table>
        </div>
        <div>
            <h2>Files</h2>
            <table>
                <tbody>
                <tr>
                    <td>files-needed</td>
                    <td class="files-needed"></td>
                </tr>
                <tr>
                    <td>files-downloaded</td>
                    <td class="files-downloaded"></td>
                </tr>
                <tr>
                    <td>percentage</td>
                    <td><span class="percentage"></span></td>
                </tr>
                <tr>
                    <td>files-downloading</td>
                    <td class="files-downloading"></td>
                </tr>
                </tbody>
            </table>
        </div>
        <div style="margin-top: 3rem">
            <div>
                <p class="status"></p>
            </div>
            <div class="loading-bar"></div>
        </div>
    </div>

    <div class="bg-container"></div>
{% endblock %}

{% block js %}
    <script>
        /**
         * Generate a HTMLElement with the given attributes and optional children.
         *
         * @param {string} tag
         * @param {object} attrs
         * @param {array=} children
         * @returns {HTMLElement}
         */
        const elem = function (tag, attrs, children) {
            const elem = document.createElement(tag);

            Object.keys(attrs).forEach(function (key) {
                if (key in document.createElement(tag)) {
                    if (key === 'style') {
                        Object.keys(attrs.style).forEach(function (property) {
                            elem.style[property] = attrs.style[property];
                            // elem.style.zIndex = '69';
                            // elem.style.backgroundImage =  'https://via.placeholder.com/350x150'
                            // console.log(property)
                            // console.log(attrs.style)
                            // console.log(attrs.style[property])
                            // console.log(elem.style)
                            // console.log('\n\n\n')
                        });
                    } else {
                        elem[key] = attrs[key];
                    }
                } else {
                    elem.setAttribute(key, attrs[key]);
                }
            });

            if (Array.isArray(children)) {
                children.forEach(function (child) {
                    elem.appendChild(child);
                });
            }

            return elem;
        };

        var bg_images = [];

        for (var x = 1; x < 21; x++) {
            bg_images.push('{{ assets ~ '/img/backgrounds/tmp/bg' }}' + x + '.png');
        }

        const bg_container = document.querySelector('.bg-container');

        [].forEach.call(bg_images, function (img) {
            bg_container.appendChild(elem('div', {
                className: 'bg-item',
                style: {
                    backgroundImage: 'url(' + img + ')'
                }
            }))
        });

        var bg_index = 0;

        const bg_children = bg_container.childNodes;

        function setupNextBackground(backgrounds, indx) {
            indx++;

            if (indx + 1 > backgrounds.length) {
                indx = 0;
            }

            backgrounds[indx].style.opacity = '1';
            backgrounds[indx].style.zIndex = '-1001';
        }

        function nextBackground() {
            const prev_bg = bg_index;

            bg_index++;

            if (bg_index >= bg_children.length) {
                bg_index = 0;
            }

            bg_children[prev_bg].style.opacity = '0';

            setTimeout(function () {
                bg_children[prev_bg].style.zIndex = -9998;
                bg_children[bg_index].style.zIndex = -1000;
                setupNextBackground(bg_children, bg_index);
            }, 650);
        }

        bg_children[bg_index].style.opacity = '1';
        bg_children[bg_index].style.zIndex = '-1000';

        setupNextBackground(bg_children, bg_index);

        var interv = null;

        function startBg() {
            interv = setInterval(function () {
                nextBackground();
            }, 3000 + 650);
        }

        function stopBg() {
            clearInterval(interv);
        }

        startBg()

        // KLoad.on('SetFilesNeeded', function (needed) {
        //     console.log('needed: ' + needed)
        // });
        // KLoad.on('SetFilesTotal', function (total) {
        //     console.log('total: ' + total)
        // });
        KLoad.on('SetStatusChanged', function (status) {
            console.log('raw status-------------------: ' + status)
        });
        // KLoad.on('DownloadingFile', function (file) {
        //     console.log('file: ' + file)
        // });


    </script>
{% endblock %}